import java.util.regex.Pattern

apply plugin: 'com.android.application'

android {
    compileSdkVersion 26
    defaultConfig {
        applicationId "com.avaskov.techmadness"
        minSdkVersion 22
        targetSdkVersion 26
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        buildConfigField("String", "APPCENTER_APP_ID", "\"34fe770a-bf8b-4daa-b889-b1d40e41a8f5\"")
    }

    lintOptions {
        abortOnError false
    }

    signingConfigs {
        release
    }

    buildTypes {
        debug {
            debuggable true

            buildConfigField("String", "SERVER_URL", "\"https://api.nytimes.com/svc/mostpopular/v2/\"")
        }
        release {
            signingConfig signingConfigs.release

            minifyEnabled false
            shrinkResources false
            debuggable false
            jniDebuggable false
            renderscriptDebuggable false
            zipAlignEnabled true

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            buildConfigField("String", "SERVER_URL", "\"https://api.nytimes.com/svc/mostpopular/v2/\"")
        }
    }

    dexOptions {
        javaMaxHeapSize "2g"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    // AppCenter
    def appCenterSdkVersion = '1.8.0'
    implementation "com.microsoft.appcenter:appcenter-analytics:${appCenterSdkVersion}"
    implementation "com.microsoft.appcenter:appcenter-crashes:${appCenterSdkVersion}"

    // UI
    implementation 'com.jakewharton:butterknife:8.0.1'
    implementation 'com.scottyab:secure-preferences-lib:0.1.4'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.0.1'

    // Support
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.android.support:design:26.1.0'

    // Testing

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'

    // Other
    implementation "org.apache.commons:commons-lang3:3.4"
    implementation "org.apache.commons:commons-collections4:4.1"

    // ReactiveX
    implementation "io.reactivex.rxjava2:rxjava:2.1.6"
    implementation "io.reactivex.rxjava2:rxandroid:2.0.1"
    implementation "com.tbruyelle.rxpermissions2:rxpermissions:0.9.4@aar"

    // Networking
    implementation "com.squareup.retrofit2:retrofit:2.1.0"
    implementation "com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0"
    implementation "com.google.code.gson:gson:2.7"
    implementation "com.squareup.retrofit2:converter-gson:2.1.0"
    implementation "com.squareup.okhttp3:okhttp:3.4.1"
    implementation "com.squareup.okhttp3:logging-interceptor:3.4.1"
    implementation("com.github.bumptech.glide:glide:4.5.0") {
        exclude group: "com.android.support"
    }
    annotationProcessor "com.github.bumptech.glide:compiler:4.5.0"

    implementation 'com.github.ybq:Android-SpinKit:1.4.0'
}

task incrementVersionCode << {
    println(":incrementVersionCode - Incrementing Version Code...")
    def manifestFile = file("src/main/AndroidManifest.xml")
    def patternVersionCode = Pattern.compile("android:versionCode=\"(\\d+)\"")
    def manifestText = manifestFile.getText()
    def matcherVersionCode = patternVersionCode.matcher(manifestText)
    matcherVersionCode.find()
    def mVersionCode = Integer.parseInt(matcherVersionCode.group(1))
    def mNextVersionCode = mVersionCode + 1
    def manifestContent = matcherVersionCode.replaceAll("android:versionCode=\"" + mNextVersionCode + "\"")
    println(":incrementVersionCode - current versionCode=" + mVersionCode)
    println(":incrementVersionCode - next versionCode=" + mNextVersionCode)
    manifestFile.write(manifestContent)
}

task release << {
    println(":release - Build and Version Increment")
}

task debug << {
    println(":debug - Build")
}

incrementVersionCode.mustRunAfter build

release.dependsOn "assembleRelease"
release.dependsOn incrementVersionCode

Properties props = new Properties()
def propFile = new File("signing.properties")
if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))

    if (props != null
            && props.containsKey("KEYSTORE_FILE")
            && props.containsKey("KEYSTORE_PASSWORD")
            && props.containsKey("KEY_ALIAS")
            && props.containsKey("KEY_PASSWORD")) {

        def keystoreFile = new File("$rootDir", props["KEYSTORE_FILE"])
        if (keystoreFile.canRead()) {
            println("keystore file parsed successfully")
            android.signingConfigs.release.storeFile = keystoreFile
            android.signingConfigs.release.storePassword = props["KEYSTORE_PASSWORD"]
            android.signingConfigs.release.keyAlias = props["KEY_ALIAS"]
            android.signingConfigs.release.keyPassword = props["KEY_PASSWORD"]
        } else {
            println("keystore file not found: " + props["KEYSTORE_FILE"])
            android.buildTypes.release.signingConfig = null
        }
    } else {
        println("signing.properties found but some entries missing")
        android.buildTypes.release.signingConfig = null
    }
} else {
    println("signing.properties not found")
    android.buildTypes.release.signingConfig = null
}
